#+TITLE: Emacs Config
#+PROPERTY: header-args :emacs-lisp :tangle  ~/.emacs

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#general-configuration][General Configuration]]
  - [[#emacs-essentials][Emacs Essentials]]
  - [[#balanced-parentheses][Balanced Parentheses]]
- [[#package-management][Package Management]]
  - [[#install-packages][Install Packages]]
- [[#key-bindings][Key Bindings]]
  - [[#which-key][Which-Key]]
  - [[#global-key-bindings][Global Key Bindings]]
  - [[#handy-shortcuts][Handy Shortcuts]]
- [[#themes-and-appearance][Themes and Appearance]]
  - [[#theme][Theme]]
    - [[#doom-theme][Doom-theme]]
  - [[#mode-line][Mode Line]]
    - [[#spaceline][Spaceline]]
    - [[#enable-mode-diminishing][Enable Mode Diminishing]]
- [[#org-mode][Org Mode]]
  - [[#org-configuration][Org Configuration]]
  - [[#update-table-of-contents][Update Table of Contents]]
  - [[#bullets][Bullets]]
  - [[#padding][Padding]]
  - [[#structure-templates][Structure Templates]]
  - [[#spell-checking][Spell checking]]
- [[#company][Company]]
- [[#helm][Helm]]
- [[#treemacs][Treemacs]]
- [[#lsp-mode][LSP Mode]]
  - [[#lsp-ui][lsp-ui]]
- [[#development][Development]]
  - [[#git][Git]]
  - [[#languages][Languages]]
    - [[#cc][C/C++]]
    - [[#html][HTML]]
    - [[#java][Java]]
    - [[#python][Python]]
    - [[#javascript][JavaScript]]
    - [[#bash][Bash]]
:END: 
* General Configuration
** Emacs Essentials
This will maximize the screen when emacs boots up.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))  
#+end_src

Removes the startup screen, the tool-bar, menu-bar and sets font to Ubuntu Mono-13
#+begin_src emacs-lisp  
  (setq inhibit-startup-screen t)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (cond
   ((find-font (font-spec :name "Ubuntu Mono-13")) 
    (set-frame-font "Ubuntu Mono-13")))
  (show-paren-mode 1)
  (setq show-paren-style 'mixed)
  (global-linum-mode t)
  (setq make-backup-files nil)
  (set-language-environment "UTF-8") ;; Mainly meant for Windows 10
#+end_src

** Balanced Parentheses
#+begin_src emacs-lisp
  (electric-pair-mode 1)  
  (setq electric-pair-pairs
        '(
          (?\" . ?\")
          (?\{ . ?\})))
#+end_src

* Package Management
Set up ELPA, MELPA, and Org package repositories and load =use-package= to manage package configuration.
#+begin_src emacs-lisp
  (setq
   package-enable-at-startup nil
   package-archives '(("melpa" . "https://melpa.org/packages/")
                      ("org" . "https://orgmode.org/elpa/")
                      ("elpa" . "https://elpa.gnu.org/packages/")))

  (eval-when-compile
    (require 'package)
    (package-initialize t))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src
** Install Packages
This section is meant for downloading the packages that aren't being costumized but are being used in this config,
#+begin_src emacs-lisp
  (use-package flycheck)
  (use-package yasnippet)
#+end_src

* Key Bindings
** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Global Key Bindings
Toggles which-key
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x w") 'which-key-mode)
#+end_src

Starts vterm
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c s") 'vterm)
#+end_src

Moving between windows
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c <up>") 'windmove-up)
  (global-set-key (kbd "C-c <down>") 'windmove-down)
  (global-set-key (kbd "C-c <left>") 'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
#+end_src

** Handy Shortcuts
- To use a shell inside emacs, use: =C-c s=
- To find where a method/function was defined, use: =M-.=
- Their is now a micro for executing code action, use: =M-RET=. It will only work while being in lsp-java mode!
- A handly shortcut for java development is flycheck-list-errors, use: =C-c ! l=
- To toggle treemacs, use: =C-c t=
- To select the treemacs window, use: =C-c C-t=
- To toggle which-key, use: =C-x w=
- Move to up window, use: =C-c <up>=
- Move to down window, use: =C-c <down>=
- Move to left window, use: =C-c <left>=
- Move to right window, use: =C-c <right>=
- Find the definition of functions with: =C-c f=
* Themes and Appearance
** Theme
*** Doom-theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t))
#+end_src
** Mode Line
*** Spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :config
    (require 'spaceline-config)
    (spaceline-emacs-theme))
#+end_src

*** Enable Mode Diminishing
Hide minor modes from the modeline by using the diminish package.
#+begin_src emacs-lisp
  (use-package diminish
    :init
    (diminish 'company-mode)
    (diminish 'helm-mode)
    (diminish 'buffer-face-mode)
    (diminish 'org-indent-mode)
    (diminish 'visual-line-mode)
    (diminish 'lsp-mode)
    (diminish 'abbrev-mode)
    (diminish 'yas-minor-mode)
    (diminish 'flycheck-mode)
    (diminish 'eldoc-mode))
#+end_src

* Org Mode
** Org Configuration
Set up Org Mode with a basic configuration. 
#+begin_src emacs-lisp
  (setq org-support-shift-select t)

  (defun gd/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (linum-mode 0))

  (use-package org
    :hook
    (org-mode . gd/org-mode-setup)
    (org-mode . flyspell-mode)
    :config
    (setq org-ellipsis " ..."
          org-hide-emphasis-markers t)
    (setq org-startup-folded t)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch) ;; Ensures that table rows are alignst
    ;; Disables <> auto pairing in electric mode with org-mode
    (add-hook 'org-mode-hook (lambda ()
                               (setq-local electric-pair-inhibit-predicate
                                           `(lambda (c)
                                              (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))))
#+end_src

** Update Table of Contents
For updating the table of contents in an org-mode file I use org-make-toc.
#+begin_src emacs-lisp
  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))
#+end_src

** Bullets
Use bullet characters instead of asterisks.
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-bullets-bullet-list '(" ")))

  ;; Replace list pyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
#+end_src

** Padding
Puts padding during org-mode.
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (org-mode . gd/org-mode-visual-fill))

  (defun gd/org-mode-visual-fill ()
    (setq visual-fill-column-width 140)
    (visual-fill-column-mode 1)) 
#+end_src

** Structure Templates
#+begin_src  emacs-lisp        
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("jv" . "src java"))
  (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
#+end_src



** Spell checking
Spell chekcing on Windows is done using hunspell
#+begin_src emacs-lisp
(use-package ispell
  :config
    (setq ispell-program-name "C:\\Program Files\\hunspell\\bin\\hunspell.exe")
    (setq ispell-local-dictionary "en_GB")
    (setq ispell-local-dictionary-alist
            '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB") nil utf-8)))

    ;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
    ;; If it's nil, Emacs tries to automatically set up the dictionaries.
    (when (boundp 'ispell-hunspell-dictionary-alist)
          (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)))
#+end_src

* Company
Setting up company.
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))
#+end_src

* Helm
Helm is used to improve directory navigation.
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :init
    (defun tkj-list-buffers()
      (interactive)
      (let ((helm-full-frame t))
        (helm-mini)))

    :bind ("C-x C-b" . 'tkj-list-buffers)
    :config
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (setq helm-display-header-line nil)
    (set-face-attribute 'helm-source-header nil :height 0.1)
    (helm-autoresize-mode 1)
    (setq helm-autoresize-max-height 25)
    (setq helm-autoresize-min-height 25)
    (helm-mode 1))
#+end_src

* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :bind
    ("C-c t" . 'treemacs)
    ("C-c C-t" . 'treemacs-select-window)
    :config
    (add-hook 'treemacs-mode-hook
              (lambda () (treemacs-resize-icons 15)))
    (setq treemacs-is-never-other-window t)
    (scroll-bar-mode 0))
#+end_src

* LSP Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands
    (lsp lsp-deferred)    
    :bind
    ("M-RET" . lsp-execute-code-action)
    ("C-c l" . lsp-keymap-prefix)
    ("C-c f" . lsp-find-definition)
    :config
    (setq lsp-headerline-breadcrumb-enable nil))
#+end_src

** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-prefer-flymake nil
          lsp-ui-doc-delay 1.5
          lsp-ui-sideline-enable nil
          lsp-ui-sideline-show-symbol nil))
#+end_src

* Development
** Git
** Languages
*** C/C++
Uses =irony-mode= together with =libclang= to provide code completion. You will need to have =clang=, =cmake= and =libclang= in your system to use the code completion!
#+begin_src emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+end_src

*** HTML
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))

    (add-to-list 'company-backends 'company-css)
    (add-to-list 'company-backends 'company-web-html)

    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2)
    (setq web-mode-enable-current-element-highlight t))

  (use-package sass-mode)
#+end_src

*** Java
NOTE: This solution isn't ideal and will be improved in the future
#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t
    :config
    (require 'dap-java)
    (add-hook 'java-mode-hook #'lsp)
    (add-hook 'java-mode-hook 'yas-global-mode) 
    (add-hook 'java-mode-hook 'flycheck-mode)

    ;; Java has different indentation, the code below fixes that
    (add-hook 'java-mode-hook (lambda ()
                                (setq c-basic-offset 4
                                      tab-width 4
                                      indent-tabs-mode t)))

    ;; Turns on Flycheck errors list at the buttom
    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*Flycheck errors*" eos)
                   (display-buffer-reuse-window
                    display-buffer-in-side-window)
                   (side            . bottom)
                   (reusable-frames . visible)
                   (window-height   . 0.15))))
#+end_src

*** Python
#+begin_src emacs-lisp
  (use-package python-mode
    :hook
    (python-mode . lsp)
    (python-mode . yas-minor-mode)
    :custom
    (python-shell-interpreter "python3.9"))
#+end_src

*** JavaScript
RJSX mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode "\\.js\\'"
    :hook (rjsx-mode . jsp))
#+end_src

Tide
#+begin_src emacs-lisp
  (defun setup-tide-mode()
    "Setup function for tide"
    (interactive)
    (tide-setup)
    (flycheck-mode 1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (tide-hl-identifier-mode 1)
    (company-mode 1))

  (use-package tide
    :after (rjsx-mode company flycheck)
    :hook (rjsx-mode . setup-tide-mode))
#+end_src

*** Bash
#+begin_src sh
  (add-hook 'sh-mode-hook 'flyckech-mode)
  (add-hook 'sh-mode 'lsp) ;; checkout "https://github.com/bash-lsp/bash-language-server"
                              (setq sh-basic-offset 2
                               sh-indentation 2)
#+end_src
