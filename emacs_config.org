#+TITLE: Emancs Config
#+PROPERTY: header-args :emacs-lisp :tangle  ~/.emacs

* Table of Content
- [[#general-configuration][General Configuration]]
  - [[#emacs-essentials][Emacs Essentials]]
  - [[#balanced-parentheses][Balanced Parentheses]]
- [[#shell-on-emacs][Shell On Emacs]]
- [[#package-management][Package Management]]
- [[#theme][Theme]]
  - [[#spacemacs-dark-theme][Spacemacs-dark theme]]
  - [[#spaceline][Spaceline]]
- [[#org-mode][Org Mode]]
- [[#company][Company]]
- [[#helm][Helm]]
- [[#lsp-mode][LSP Mode]]
- [[#development][Development]]
  - [[#git][Git]]
  - [[#languages][Languages]]
    - [[#cc][C/C++]]
    - [[#html][HTML]]
    - [[#java][Java]]
    - [[#python][Python]]

* General Configuration
** Emacs Essentials
This will maximize the screen when emacs boots up.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))  
#+end_src

Removes the startup screen, the tool-bar, menu-bar and sets font to Ubuntu Mono-13
#+begin_src emacs-lisp  
  (setq inhibit-startup-screen t)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (set-frame-font "Ubuntu Mono-13")
  (show-paren-mode 1)
  (setq show-paren-style 'mixed)
  (global-linum-mode t)  
#+end_src
** Balanced Parentheses
#+begin_src emacs-lisp
  (electric-pair-mode 1)  
  (setq electric-pair-pairs
        '(
          (?\" . ?\")
          (?\{ . ?\})))
#+end_src

* Shell On Emacs
Starts a shell inside of emacs by pressing =C-c s=
#+begin_src emacs-lisp
  (defun my-term (name _action)
    "Determine whether NAME names a `term-mode' buffer."
    (with-current-buffer name
      (derived-mode-p #'term-mode)))
  
  (defun my-terminal ()
    "Start Bash in a terminal emulator.
  Like `term', but respect buffer display actions."
    (interactive)
    (let ((switch-to-buffer-obey-display-actions t))
      (term "/bin/bash")))
  
  (add-to-list 'display-buffer-alist
               '(my-term () (inhibit-same-window . t)
                         (display-buffer-below-selected)
                         (window-height . 0.20)))
  
  (global-set-key
   (kbd "C-c s")
   (lambda ()
     (interactive)
     (let ((current-prefix-arg '(4)))
       (call-interactively #'my-terminal))))
#+end_src
